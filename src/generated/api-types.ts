/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * チーム一覧取得
     * @description 自分が所属しているチームの一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
          /** @description 権限によるフィルタ */
          role?: "member" | "owner";
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["TeamList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * チーム情報取得
     * @description 指定されたチームの情報を取得します
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Team"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * チーム統計情報取得
     * @description チームの統計情報を取得します
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["TeamStats"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * メンバー一覧取得
     * @description チームのメンバー一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
          /** @description ソート基準 */
          sort?: "posts_count" | "joined" | "last_accessed";
          /** @description ソート順序 */
          order?: "desc" | "asc";
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["MemberList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/members/{screen_name_or_email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * メンバー情報取得
     * @description 指定されたメンバーの情報を取得します
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description スクリーンネームまたはメールアドレス（meで自分） */
          screen_name_or_email: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Member"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    /**
     * メンバー削除
     * @description 指定されたメンバーをチームから削除します（owner権限必要）
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description スクリーンネームまたはメールアドレス */
          screen_name_or_email: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 削除成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 記事一覧取得
     * @description チームの記事一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
          /** @description 追加で含める情報（カンマ区切り） */
          include?: components["parameters"]["include"];
          /** @description 検索クエリ */
          q?: string;
          /** @description ソート基準 */
          sort?:
            | "updated"
            | "created"
            | "number"
            | "stars"
            | "watches"
            | "comments"
            | "best_match";
          /** @description ソート順序 */
          order?: "desc" | "asc";
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["PostList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    /**
     * 記事作成
     * @description 新しい記事を作成します
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            post: components["schemas"]["PostCreateInput"];
          };
        };
      };
      responses: {
        /** @description 作成成功 */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 記事投稿デフォルト値取得
     * @description 記事投稿時のデフォルトのタイトルと記事本文を返します
     */
    get: {
      parameters: {
        query?: {
          /** @description 記事複製時に元の記事のIDを指定する */
          parent_post_id?: number;
          /** @description カテゴリの「ここに投稿」時にカテゴリのパスを指定する */
          category_path?: string;
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              post: components["schemas"]["PostNew"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/{post_number}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 記事取得
     * @description 指定された記事を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description 追加で含める情報（カンマ区切り） */
          include?: components["parameters"]["include"];
          /**
           * @description 本文中のsecure attachment URL（https://files.esa.io/ または https://dl.esa.io/）を署名付きURLに変換するかどうか。
           *     - `false`: 変換しない（デフォルト）
           *     - `true`: 60秒の有効期限で署名付きURLに変換
           *     - 整数値（1-604800）: 指定した秒数の有効期限で署名付きURLに変換
           */
          sign_attachment_urls?: components["parameters"]["sign_attachment_urls"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    /**
     * 記事削除
     * @description 指定された記事を削除します
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 削除成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    /**
     * 記事更新
     * @description 指定された記事を更新します
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            post: components["schemas"]["PostUpdateInput"];
          };
        };
      };
      responses: {
        /** @description 更新成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Post"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        409: components["responses"]["ConflictError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/{post_number}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * コメント一覧取得
     * @description 記事のコメント一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CommentList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    /**
     * コメント作成
     * @description 記事に新しいコメントを作成します
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            comment: components["schemas"]["CommentInput"];
          };
        };
      };
      responses: {
        /** @description 作成成功 */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Comment"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * チーム全体のコメント一覧取得
     * @description チーム全体のコメント一覧を作成日の降順で取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CommentList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/comments/{comment_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * コメント取得
     * @description 指定されたコメントを取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description 追加で含める情報 */
          include?: "stargazers";
          /**
           * @description 本文中のsecure attachment URL（https://files.esa.io/ または https://dl.esa.io/）を署名付きURLに変換するかどうか。
           *     - `false`: 変換しない（デフォルト）
           *     - `true`: 60秒の有効期限で署名付きURLに変換
           *     - 整数値（1-604800）: 指定した秒数の有効期限で署名付きURLに変換
           */
          sign_attachment_urls?: components["parameters"]["sign_attachment_urls"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description コメントID */
          comment_id: components["parameters"]["comment_id"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Comment"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    /**
     * コメント削除
     * @description 指定されたコメントを削除します
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description コメントID */
          comment_id: components["parameters"]["comment_id"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 削除成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    /**
     * コメント更新
     * @description 指定されたコメントを更新します
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description コメントID */
          comment_id: components["parameters"]["comment_id"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            comment: components["schemas"]["CommentInput"];
          };
        };
      };
      responses: {
        /** @description 更新成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Comment"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/{post_number}/stargazers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 記事のスター一覧取得
     * @description 指定された記事にスターしたユーザー一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["StarList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/{post_number}/star": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 記事にスター
     * @description 指定された記事にスターします
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StarInput"];
        };
      };
      responses: {
        /** @description スター成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /**
     * 記事のスター取り消し
     * @description 指定された記事のスターを取り消します
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 取り消し成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/comments/{comment_id}/stargazers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * コメントのスター一覧取得
     * @description 指定されたコメントにスターしたユーザー一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description コメントID */
          comment_id: components["parameters"]["comment_id"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["StarList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/comments/{comment_id}/star": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * コメントにスター
     * @description 指定されたコメントにスターします
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description コメントID */
          comment_id: components["parameters"]["comment_id"];
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StarInput"];
        };
      };
      responses: {
        /** @description スター成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /**
     * コメントのスター取り消し
     * @description 指定されたコメントのスターを取り消します
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description コメントID */
          comment_id: components["parameters"]["comment_id"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 取り消し成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/{post_number}/watchers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 記事のウォッチャー一覧取得
     * @description 指定された記事をウォッチしているユーザー一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["WatcherList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/posts/{post_number}/watch": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 記事をウォッチ
     * @description 指定された記事をウォッチします
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description ウォッチ成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /**
     * 記事のウォッチ取り消し
     * @description 指定された記事のウォッチを取り消します
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 記事番号 */
          post_number: components["parameters"]["post_number"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 取り消し成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * カテゴリ情報取得
     * @description 指定されたカテゴリの情報と配下のカテゴリを取得します
     */
    get: {
      parameters: {
        query: {
          /** @description カテゴリを指定して部分的に取得する */
          select: string;
          /** @description 追加で含める情報（カンマ区切り） */
          include?: "posts" | "parent_categories";
          /** @description postsに子孫記事を含めるか（include=postsの場合のみ有効） */
          descendant_posts?: boolean;
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CategoryList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/categories/top": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * トップカテゴリ情報取得
     * @description チームのトップレベルのカテゴリ情報を取得します
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CategoryList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/categories/no_category": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * カテゴリなし記事一覧取得
     * @description カテゴリに属さない記事の一覧を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CategoryList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/categories/paths": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * カテゴリパス一覧取得
     * @description チームのカテゴリパスの一覧を取得します。フィルタリングオプションにより、特定の条件に合致するカテゴリのみを取得できます
     */
    get: {
      parameters: {
        query?: {
          /** @description 指定した文字列で始まるカテゴリパスのみを取得 */
          prefix?: string;
          /** @description 指定した文字列で終わるカテゴリパスのみを取得 */
          suffix?: string;
          /** @description 指定した文字列を含むカテゴリパスのみを取得 */
          match?: string;
          /** @description 指定したパスと完全一致するカテゴリのみを取得 */
          exact_match?: string;
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description カテゴリのパス（先頭と末尾のスラッシュは除去される）
               * @example dev/docs
               */
              path: string | null;
              /**
               * @description カテゴリ内の記事数
               * @example 42
               */
              posts: number;
            }[];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/categories/batch_move": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * カテゴリ一括移動
     * @description 指定されたカテゴリを配下のカテゴリを含めて一括で変更します
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BatchMoveInput"];
        };
      };
      responses: {
        /** @description 移動成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BatchMoveResult"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * タグ一覧取得
     * @description タグ一覧をタグ付けされた記事数の降順で取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["TagList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/invitation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 共通招待URL取得
     * @description チームへの招待URLを取得します（owner権限必要）
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invitation"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/invitation_regenerator": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 共通招待URL再発行
     * @description チームへの招待URLを再発行します（owner権限必要）
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 再発行成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invitation"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/invitations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Email招待一覧取得
     * @description 招待中のメンバーの一覧を取得します（owner権限必要）
     */
    get: {
      parameters: {
        query?: {
          /** @description ページ番号（1から開始） */
          page?: components["parameters"]["page"];
          /** @description 1ページあたりの要素数 */
          per_page?: components["parameters"]["per_page"];
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EmailInvitationList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    /**
     * Email招待送信
     * @description 指定したメールアドレスに個別招待を送信します（owner権限必要）
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmailInvitationInput"];
        };
      };
      responses: {
        /** @description 招待送信成功 */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EmailInvitationList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/invitations/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Email招待削除
     * @description 招待中のメンバーの招待を削除します（owner権限必要）
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 招待コード */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 削除成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/emojis": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 絵文字一覧取得
     * @description チームで利用可能な絵文字を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description all を指定するとすべての絵文字を返します */
          include?: "all";
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EmojiList"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    /**
     * 絵文字登録
     * @description 新しい絵文字を登録します
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            emoji: components["schemas"]["EmojiInput"];
          };
          "multipart/form-data": {
            /** @description 絵文字のコード */
            "emoji[code]": string;
            /**
             * Format: binary
             * @description 画像ファイル
             */
            "emoji[image]": string;
          };
        };
      };
      responses: {
        /** @description 登録成功 */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EmojiResult"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/emojis/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 絵文字削除
     * @description 登録したチーム固有の絵文字を削除します
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
          /** @description 絵文字のコード */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 削除成功 */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/teams/{team_name}/signed_urls": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 署名付きURL取得（複数）
     * @description 複数のファイルパスに対して署名付きURLを取得します。
     *     最大1000個のURLを一度に処理できます。
     */
    get: {
      parameters: {
        query: {
          /**
           * @description カンマ区切りのファイルパス（最大1000個）
           *     ただし、URLの長さの制限があるため多数指定する場合はPOSTメソッドを使用してください
           * @example /uploads/example/file1.png,/uploads/example/file2.png
           */
          urls: string;
          /**
           * @description 署名付きURLの有効期限（秒数）。1〜604800（1週間）の範囲で指定可能。指定しない場合はデフォルトの60秒
           * @example 3600
           */
          expires_in?: number;
        };
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description 入力URLと署名付きURLのペアの配列。
               *     各要素は[入力URL, 署名付きURL]の形式。
               *     ファイルが見つからない場合、署名付きURLはnullになります。
               * @example [
               *       [
               *         "/uploads/example/file1.png",
               *         "https://s3.amazonaws.com/bucket/uploads/example/file1.png?signature=..."
               *       ],
               *       [
               *         "uploads/example/file2.png",
               *         "https://s3.amazonaws.com/bucket/uploads/example/file2.png?signature=..."
               *       ]
               *     ]
               */
              signed_urls?: string[][];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    /**
     * 署名付きURL取得（複数）
     * @description 複数のファイルパスに対して署名付きURLを取得します。
     *     最大1000個のURLを一度に処理できます。
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description チーム名 */
          team_name: components["parameters"]["team_name"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /**
             * @description ファイルパスの配列（最大1000個）
             * @example [
             *       "/uploads/example/file1.png",
             *       "uploads/example/file2.png",
             *       "https://example.com/uploads/example/file3.png"
             *     ]
             */
            urls: string[];
            /**
             * @description 署名付きURLの有効期限（秒数）。1〜604800（1週間）の範囲で指定可能。指定しない場合はデフォルトの60秒
             * @example 3600
             */
            expires_in?: number;
          };
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /**
               * @description 入力URLと署名付きURLのペアの配列。
               *     各要素は[入力URL, 署名付きURL]の形式。
               *     ファイルが見つからない場合、署名付きURLはnullになります。
               * @example [
               *       [
               *         "/uploads/example/file1.png",
               *         "https://s3.amazonaws.com/bucket/uploads/example/file1.png?signature=..."
               *       ],
               *       [
               *         "uploads/example/file2.png",
               *         "https://s3.amazonaws.com/bucket/uploads/example/file2.png?signature=..."
               *       ]
               *     ]
               */
              signed_urls?: string[][];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 認証中ユーザー情報取得
     * @description 現在のアクセストークンで認証中のユーザーの情報を取得します
     */
    get: {
      parameters: {
        query?: {
          /** @description teams を指定すると所属チーム一覧を含みます */
          include?: "teams";
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description 成功 */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CurrentUser"];
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        402: components["responses"]["PaymentRequiredError"];
        403: components["responses"]["ForbiddenError"];
        405: components["responses"]["MethodNotAllowedError"];
        406: components["responses"]["NotAcceptableError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      /** @description エラーコード */
      error: string;
      /** @description エラーメッセージ */
      message: string;
    };
    Pagination: {
      /** @description 前のページ番号 */
      prev_page?: number | null;
      /** @description 次のページ番号 */
      next_page?: number | null;
      /** @description 総数 */
      total_count?: number;
      /** @description 現在のページ番号 */
      page?: number;
      /** @description 1ページあたりの要素数 */
      per_page?: number;
      /** @description per_pageの最大値 */
      max_per_page?: number;
    };
    User: {
      /** @description 自分自身かどうか */
      myself: boolean;
      /** @description ユーザー名 */
      name: string;
      /** @description スクリーンネーム */
      screen_name: string;
      /**
       * Format: uri
       * @description アイコンのURL
       */
      icon: string;
    };
    Team: {
      /**
       * @description チーム名
       * @example docs
       */
      name: string;
      /**
       * @description チームの公開範囲
       * @enum {string}
       */
      privacy: "closed" | "open";
      /** @description チームの説明 */
      description: string;
      /**
       * Format: uri
       * @description チームのアイコンURL
       */
      icon: string;
      /**
       * Format: uri
       * @description チームのURL
       */
      url: string;
    };
    TeamList: components["schemas"]["Pagination"] & {
      teams: components["schemas"]["Team"][];
    };
    TeamStats: {
      /** @description チーム内のメンバーの総数 */
      members: number;
      /** @description チーム内の記事の総数 */
      posts: number;
      /** @description チーム内の記事(wip)の総数 */
      posts_wip: number;
      /** @description チーム内の記事(shipped)の総数 */
      posts_shipped: number;
      /** @description チーム内のコメントの総数 */
      comments: number;
      /** @description チーム内のスターの総数 */
      stars: number;
      /** @description 過去24時間以内の活動ユーザー数 */
      daily_active_users: number;
      /** @description 過去7日間以内の活動ユーザー数 */
      weekly_active_users: number;
      /** @description 過去30日間以内の活動ユーザー数 */
      monthly_active_users: number;
    };
    Member: components["schemas"]["User"] & {
      /**
       * Format: email
       * @description メンバーのemail
       */
      email: string;
      /**
       * @description メンバーのロール
       * @enum {string}
       */
      role: "owner" | "member";
      /** @description チーム内での記事作成数 */
      posts_count: number;
      /**
       * Format: date-time
       * @description チームに参加した日時
       */
      joined_at: string;
      /**
       * Format: date-time
       * @description 最終アクセス日時
       */
      last_accessed_at: string;
    };
    MemberList: components["schemas"]["Pagination"] & {
      members: components["schemas"]["Member"][];
    };
    Post: {
      /** @description 記事番号 */
      number: number;
      /** @description 記事名 */
      name: string;
      /** @description タグ */
      tags: string[];
      /** @description カテゴリ */
      category: string | null;
      /** @description カテゴリとタグを含む記事名 */
      full_name: string;
      /** @description WIP状態かどうか */
      wip: boolean;
      /** @description Markdownの本文 */
      body_md: string;
      /** @description HTMLの本文 */
      body_html: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      created_at: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updated_at: string;
      /** @description 更新メッセージ */
      message?: string;
      /**
       * Format: uri
       * @description 記事のURL
       */
      url: string;
      /** @description リビジョン番号 */
      revision_number: number;
      created_by: components["schemas"]["User"];
      updated_by: components["schemas"]["User"];
      /**
       * @description 記事の種別
       * @enum {string}
       */
      kind?: "stock" | "flow";
      /** @description コメント数 */
      comments_count?: number;
      /** @description タスクの総数 */
      tasks_count?: number;
      /** @description 完了済みタスクの総数 */
      done_tasks_count?: number;
      /** @description スターの数 */
      stargazers_count?: number;
      /** @description ウォッチャーの数 */
      watchers_count?: number;
      /** @description 自分がスターしているかどうか */
      star?: boolean;
      /** @description 自分がウォッチしているかどうか */
      watch?: boolean;
      /** @description 3-way mergeでコンフリクトが起きたかどうか */
      overlapped?: boolean;
      /** @description コメント一覧(include=comments) */
      comments?: components["schemas"]["Comment"][];
      /** @description スターしたメンバー一覧(include=stargazers) */
      stargazers?: (components["schemas"]["Star"] &
        components["schemas"]["Member"])[];
    };
    PostList: components["schemas"]["Pagination"] & {
      posts: components["schemas"]["Post"][];
    };
    PostNew: {
      /** @description デフォルトの記事名 */
      name: string;
      /** @description デフォルトの本文 */
      body_md: string;
    };
    PostCreateInput: {
      /** @description 記事名 */
      name: string;
      /** @description Markdownの本文 */
      body_md?: string;
      /** @description タグ */
      tags?: string[];
      /** @description カテゴリ */
      category?: string;
      /**
       * @description WIP状態かどうか
       * @default true
       */
      wip: boolean;
      /** @description 更新メッセージ */
      message?: string;
      /** @description 記事投稿者のscreen_name（owner権限必要） */
      user?: string;
      /** @description テンプレート記事のID */
      template_post_id?: number;
      /** @description 作成者のscreen_name（owner権限必要） */
      created_by?: string;
      /** @description 更新者のscreen_name（owner権限必要） */
      updated_by?: string;
    };
    PostUpdateInput: {
      /** @description 記事名 */
      name?: string;
      /** @description Markdownの本文 */
      body_md?: string;
      /** @description タグ */
      tags?: string[];
      /** @description カテゴリ */
      category?: string;
      /** @description WIP状態かどうか */
      wip?: boolean;
      /** @description 更新メッセージ */
      message?: string;
      /** @description 記事投稿者のscreen_name（owner権限必要） */
      user?: string;
      /** @description テンプレート記事のID */
      template_post_id?: number;
      /** @description 作成者のscreen_name（owner権限必要） */
      created_by?: string;
      /** @description 更新者のscreen_name（owner権限必要） */
      updated_by?: string;
      original_revision?: {
        /** @description 変更前の本文 */
        body_md?: string;
        /** @description 変更前のrevision_number */
        number?: number;
        /** @description 変更前の最終更新者のscreen_name */
        user?: string;
      };
    };
    Comment: {
      /** @description コメントID */
      id: number;
      /** @description Markdownのコメント本文 */
      body_md: string;
      /** @description HTMLのコメント本文 */
      body_html: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      created_at: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updated_at: string;
      /** @description 記事番号 */
      post_number: number;
      /**
       * Format: uri
       * @description コメントのURL
       */
      url: string;
      created_by: components["schemas"]["User"];
      /** @description スターの数 */
      stargazers_count: number;
      /** @description 自分がスターしているかどうか */
      star: boolean;
      /** @description スターしたメンバー一覧(include=stargazers or include=comments.stargazers) */
      stargazers?: (components["schemas"]["Star"] &
        components["schemas"]["Member"])[];
    };
    CommentList: components["schemas"]["Pagination"] & {
      comments: components["schemas"]["Comment"][];
    };
    CommentInput: {
      /** @description Markdownのコメント本文 */
      body_md: string;
      /** @description コメント投稿者のscreen_name（owner権限必要） */
      user?: string;
    };
    Star: {
      /**
       * Format: date-time
       * @description スターした日時
       */
      created_at: string;
      /** @description 引用スターの本文 */
      body: string | null;
      user: components["schemas"]["User"];
    };
    StarList: components["schemas"]["Pagination"] & {
      stargazers: components["schemas"]["Star"][];
    };
    StarInput: {
      /** @description 引用スターの本文 */
      body?: string;
    };
    Watcher: {
      /**
       * Format: date-time
       * @description ウォッチした日時
       */
      created_at: string;
      user: components["schemas"]["User"];
    };
    WatcherList: components["schemas"]["Pagination"] & {
      watchers: components["schemas"]["Watcher"][];
    };
    Tag: {
      /** @description タグ名 */
      name: string;
      /** @description タグ付けされた記事数 */
      posts_count: number;
    };
    TagList: components["schemas"]["Pagination"] & {
      tags: components["schemas"]["Tag"][];
    };
    BatchMoveInput: {
      /** @description 変更元のカテゴリ */
      from: string;
      /** @description 変更先のカテゴリ */
      to: string;
    };
    BatchMoveResult: {
      /** @description 変更されたカテゴリの数 */
      count: number;
      /** @description 変更元のカテゴリ */
      from: string;
      /** @description 変更先のカテゴリ */
      to: string;
    };
    Invitation: {
      /**
       * Format: uri
       * @description 招待URL
       */
      url: string;
    };
    EmailInvitation: {
      /**
       * Format: email
       * @description 招待されたメールアドレス
       */
      email: string;
      /** @description 招待コード */
      code: string;
      /**
       * Format: date-time
       * @description 有効期限
       */
      expires_at: string;
      /**
       * Format: uri
       * @description 招待URL
       */
      url: string;
    };
    EmailInvitationList: components["schemas"]["Pagination"] & {
      invitations: components["schemas"]["EmailInvitation"][];
      /** @description 拒否されたメールアドレス */
      rejected_emails?: string[];
    };
    EmailInvitationInput: {
      member: {
        /** @description 招待するメールアドレス */
        emails: string[];
      };
      /** @description ドメイン制限を強制的に無視する */
      force?: boolean;
    };
    Emoji: {
      /** @description 絵文字のコード */
      code: string;
      /** @description エイリアス */
      aliases: string[];
      /** @description カテゴリ */
      category: string;
      /** @description Unicode文字 */
      raw: string | null;
      /**
       * Format: uri
       * @description 絵文字の画像URL
       */
      url: string;
    };
    EmojiList: {
      emojis: components["schemas"]["Emoji"][];
    };
    EmojiInput: {
      /** @description 絵文字のコード */
      code: string;
      /** @description エイリアス作成時の元コード */
      origin_code?: string;
      /** @description BASE64エンコードした画像データ */
      image?: string;
    };
    EmojiResult: {
      /** @description 作成された絵文字のコード */
      code: string;
    };
    Category: {
      /** @description カテゴリ名 */
      name: string;
      /** @description フルパスのカテゴリ名 */
      full_name?: string;
      /** @description カテゴリ内の記事数 */
      count: number;
      /** @description 子カテゴリが存在するか */
      has_child?: boolean;
      /** @description 祖先カテゴリとして選択されているか（parent_categories内でのみ使用） */
      selected?: boolean;
    };
    CategoryList: components["schemas"]["Pagination"] & {
      /** @description 現在のカテゴリパス */
      current_category: string;
      /** @description カテゴリ一覧 */
      categories: components["schemas"]["Category"][];
      /** @description 親カテゴリ一覧（include=parent_categoriesの場合） */
      parent_categories?: {
        /** @description 階層のカテゴリパス */
        current_category: string;
        categories: components["schemas"]["Category"][];
      }[];
      /** @description READMEの記事情報 */
      readme?: components["schemas"]["Post"] | null;
      /** @description カテゴリなし記事の情報（topカテゴリの場合） */
      no_category?: components["schemas"]["Category"];
      /** @description 子孫記事を含むかどうか */
      descendant_posts?: boolean;
      /** @description カテゴリ内の記事一覧（include=postsの場合） */
      posts?: components["schemas"]["Post"][];
    };
    CurrentUser: {
      /** @description ユーザーID */
      id: number;
      /** @description ユーザー名 */
      name: string;
      /** @description スクリーンネーム */
      screen_name: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      created_at: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updated_at: string;
      /**
       * Format: uri
       * @description アイコンのURL
       */
      icon: string;
      /**
       * Format: email
       * @description メールアドレス
       */
      email: string;
      /** @description 所属チーム一覧(include=teamsの場合) */
      teams?: components["schemas"]["Team"][];
    };
  };
  responses: {
    /** @description リクエストの構文が不正なため処理できません */
    BadRequestError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Bad Request",
         *       "message": "Invalid request parameters"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description 認証が必要です */
    UnauthorizedError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Unauthorized",
         *       "message": "Invalid or expired token"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description 支払いが完了するまでリクエストを処理できません */
    PaymentRequiredError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Payment Required",
         *       "message": "Payment required to access this resource"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description このリソースへのアクセス権限がありません */
    ForbiddenError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Forbidden",
         *       "message": "Insufficient permissions"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description 指定されたリソースが見つかりません */
    NotFoundError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Not Found",
         *       "message": "Resource not found"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description このリソースでは指定されたHTTPメソッドがサポートされていません */
    MethodNotAllowedError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Method Not Allowed",
         *       "message": "HTTP method not allowed for this endpoint"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description リクエストで指定された形式でのレスポンス生成ができません */
    NotAcceptableError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Not Acceptable",
         *       "message": "Requested format not supported"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description リクエストが現在のリソースの状態と競合しています */
    ConflictError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Conflict",
         *       "message": "Resource conflict detected"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description リクエスト数が制限を超えています */
    TooManyRequestsError: {
      headers: {
        /** @description 再試行可能になるまでの秒数 */
        "Retry-After"?: number;
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Too Many Requests",
         *       "message": "Rate limit exceeded"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description サーバー内部エラーが発生しました */
    InternalServerError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        /**
         * @example {
         *       "error": "Internal Server Error",
         *       "message": "An unexpected error occurred"
         *     }
         */
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description ページ番号（1から開始） */
    page: number;
    /** @description 1ページあたりの要素数 */
    per_page: number;
    /** @description チーム名 */
    team_name: string;
    /** @description 記事番号 */
    post_number: number;
    /** @description コメントID */
    comment_id: number;
    /** @description 追加で含める情報（カンマ区切り） */
    include: "comments" | "stargazers" | "comments.stargazers";
    /**
     * @description 本文中のsecure attachment URL（https://files.esa.io/ または https://dl.esa.io/）を署名付きURLに変換するかどうか。
     *     - `false`: 変換しない（デフォルト）
     *     - `true`: 60秒の有効期限で署名付きURLに変換
     *     - 整数値（1-604800）: 指定した秒数の有効期限で署名付きURLに変換
     */
    sign_attachment_urls: boolean | number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
